{"version":3,"sources":["api/api.js","components/App/App.js","serviceWorker.js","index.js"],"names":["API_URL","SOCKET_URL","App","_React$useState","React","useState","_React$useState2","Object","slicedToArray","socket","setSocket","_React$useState3","_React$useState4","socketIsConnected","setSocketIsConnected","_React$useState5","_React$useState6","backendHasInternet","setBackendHasInternet","_React$useState7","_React$useState8","availableNetworks","setAvailableNetworks","_React$useState9","_React$useState10","inputSsid","setInputSsid","_React$useState11","_React$useState12","inputPsk","setInputPsk","_React$useState13","_React$useState14","feedback","setFeedback","useEffect","connectedSocket","openSocket","on","console","log","backendState","wifi_connected","fetch","concat","method","then","response","json","off","close","react_default","a","createElement","className","onSubmit","evt","preventDefault","ssid","psk","body","headers","Content-Type","JSON","stringify","api","res","catch","err","disabled","value","onChange","currentTarget","map","network","i","key","type","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6afe56a1.chunk.js","sourcesContent":["const API_URL = '/api';\n\nexport function getAvailableNetworks() {\n  return fetch(`${API_URL}/networks/`, { method: 'GET' });\n}\n\nexport function getWifiStatus() {\n  return fetch(`${API_URL}/wifi`, { method: 'GET' });\n}\n\nexport function connectToWifi(ssid, psk) {\n  const body = { ssid: ssid, psk: psk };\n  return fetch(`${API_URL}/wifi`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(body),\n  });\n}\n","import React from 'react';\nimport openSocket from 'socket.io-client';\nimport './App.css';\nimport * as api from '../../api/api';\n\nconst SOCKET_URL = '/';\n\nfunction App() {\n  const [socket, setSocket] = React.useState();\n  const [socketIsConnected, setSocketIsConnected] = React.useState(false);\n  const [backendHasInternet, setBackendHasInternet] = React.useState(false);\n  const [availableNetworks, setAvailableNetworks] = React.useState([]);\n  const [inputSsid, setInputSsid] = React.useState('');\n  const [inputPsk, setInputPsk] = React.useState('');\n  const [feedback, setFeedback] = React.useState('');\n\n  React.useEffect(() => {\n    // initialize socket\n    const connectedSocket = openSocket(SOCKET_URL);\n    setSocket(connectedSocket);\n\n    // set up listener for when socket connects\n    connectedSocket.on('connect', () => {\n      console.log('socket connected');\n      setSocketIsConnected(true);\n    });\n\n    // set up listener for backend state\n    connectedSocket.on('state', backendState => {\n      setBackendHasInternet(backendState.wifi_connected);\n    });\n\n    api.getAvailableNetworks().then(response =>\n      response.json().then(availableNetworks => {\n        setAvailableNetworks(availableNetworks);\n      })\n    );\n\n    // destroy the socket connection on unmount\n    return () => {\n      if (!socket) {\n        return;\n      }\n\n      socket.off();\n      socket.close();\n    };\n  }, []);\n\n  const handleSsidChange = evt => {\n    setInputSsid(evt.currentTarget.value);\n  };\n\n  const handlePskChange = evt => {\n    setInputPsk(evt.currentTarget.value);\n  };\n\n  const handleConnect = evt => {\n    evt.preventDefault();\n\n    api\n      .connectToWifi(inputSsid, inputPsk)\n      .then(res => {\n        setFeedback(`Connected to ${inputSsid}.`);\n      })\n      .catch(err => {\n        console.log(err);\n        setFeedback(\n          `Unable to connect to ${inputSsid}. Please check the password and try again.`\n        );\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Connected to backend? </p>\n        <p>{socketIsConnected ? 'Yes!' : 'No'}</p>\n        <div>\n          <div>\n            <p>Backend has internet?</p>\n            <p>{backendHasInternet ? 'Yes!' : 'No'}</p>\n          </div>\n          <div>\n            Connect the backend to a WiFi network:\n            <form onSubmit={handleConnect} disabled={!inputSsid}>\n              <select value={inputSsid || 'none'} onChange={handleSsidChange}>\n                {!inputSsid && <option disabled value=\"none\" />}\n                {availableNetworks.map((network, i) => (\n                  <option value={network} key={i}>\n                    {network}\n                  </option>\n                ))}\n              </select>\n              <input\n                type=\"password\"\n                value={inputPsk}\n                onChange={handlePskChange}\n              />\n              <button disabled={!inputSsid}>Connect WiFi</button>\n            </form>\n            <div>{feedback}</div>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}